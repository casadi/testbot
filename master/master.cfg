# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
#from buildbot.libvirtbuildslave import LibVirtSlave, Connection
#vbc = Connection("vbox+ssh://casadibot@localhost/session")
#vbc = Connection("vbox:///session")
from buildbot.buildslave import BuildSlave

from buildbot.buildslave import AbstractBuildSlave, AbstractLatentBuildSlave
from twisted.internet import defer, utils, reactor, threads
from twisted.python import log
import subprocess
import time
import lockfile
import os

import pickle
import resource

# Slave
def setlimits():
    # 5 minutes
    resource.setrlimit(resource.RLIMIT_CPU, (5*60, 5*60))

from testbotcredentials import TestBotCredentials

tbc = TestBotCredentials()

from buildbot.steps.shell import ShellCommand

class DisconnectStep(ShellCommand):
    """This step is used when a command is expected to cause the slave to
disconnect from the master. It will handle connection lost errors as
expected.

Optionally it will also forcibly disconnect the slave from the master by
calling the remote 'shutdown' command, in effect doing a graceful
shutdown. If force_disconnect is True, then the slave will always be
disconnected after the command completes. If force_disconnect is a
function, it will be called with the command object, and the return value
will be used to determine if the slave should be disconnected."""
    name = "disconnect"

    def __init__(self, force_disconnect=None, **kwargs):
        self.force_disconnect = force_disconnect
        self.super_class = ShellCommand
        self.super_class.__init__(self, **kwargs)
        self.addFactoryArguments(force_disconnect=force_disconnect)

        self._disconnected = False
        self._deferred_death = None

    def interrupt(self, reason):
        # Called when the slave command is interrupted, e.g. by rebooting
        # We assume this is expected
        self._disconnected = True
        return self.finished(SUCCESS)

    def start(self):
        self.build.slavebuilder.slave.immortal = True
        # If a graceful shutdown was requested it doesn't make sense to reboot
        # the slave - so let's not do anything!
        if self.build.slavebuilder.slave.slave_status.getGraceful():
            return SKIPPED
        else:
            # Give the machine 60 seconds to go away on its own
            def die():
                self._deferred_death = None
                log.msg("Forcibly disconnecting %s" % self.getSlaveName())
                self.buildslave.disconnect()
                try:
                    # Try to close the socket too
                    self.buildslave.slave.broker.transport._closeSocket()
                except:
                    log.err()
            self._deferred_death = reactor.callLater(1800, die)
            return self.super_class.start(self)

    def checkDisconnect(self, f):
        # This is called if there's a problem executing the command because the connection was disconnected.
        # Again, we assume this is the expected behaviour
        f.trap(PBConnectionLost)
        self._disconnected = True
        return self.finished(SUCCESS)

    def commandComplete(self, cmd):
        # The command has completed normally. If force_disconnect is set, then
        # tell the slave to shutdown
        if self.force_disconnect:
            if not callable(self.force_disconnect) or self.force_disconnect(cmd):
                try:
                    d = self.remote.callRemote('shutdown')
                    d.addErrback(self._disconnected_cb)
                    d.addCallback(self._disconnected_cb)
                    return d
                except:
                    log.err()
                    return

        # Otherwise, cancel our execution
        if self._deferred_death and self._deferred_death.active:
            self._deferred_death.cancel()
            self._deferred_death = None

    def _disconnected_cb(self, res):
        # Successfully disconnected
        self._disconnected = True
        return True

    def finished(self, res):
        if self._disconnected:
            self.step_status.setText(self.describe(True) + ["slave", "lost"])
            self.step_status.setText2(['slave', 'lost'])
            if self._deferred_death and self._deferred_death.active:
                self._deferred_death.cancel()
                self._deferred_death = None
        return self.super_class.finished(self, res)


class VBoxSlave(AbstractLatentBuildSlave):
  def __init__(self,name, password, vboxname, max_builds=    None, notify_on_missing=[], missing_timeout=60*20, build_wait_timeout=60*10, properties={}, locks=None):
    AbstractLatentBuildSlave.__init__(self, name, password,max_builds, notify_on_missing, missing_timeout, build_wait_timeout, properties, locks)
    self.vboxname = vboxname
    self.lockfile = "/home/casadibot/slaves/"+self.vboxname
    self.lock = lockfile.FileLock(self.lockfile)
    self.countfile = "/home/casadibot/slaves/"+self.vboxname + "_refcount.txt"
    
    if os.path.exists(self.countfile):
      file(self.countfile,"w").write("0")
    if os.path.exists(self.lockfile):
      try:
        os.remove(self.lockfile)
      except:
        pass

  def substantiate(self,*args,**kwargs):
    with self.lock:
      try:
        cnt = int(file(self.countfile,"r").read())
      except:
        cnt = 0
      cnt += 1
      log.msg("VBox (%s) substantiation counter: %d" % (self.vboxname,cnt))
      file(self.countfile,"w").write("%d" % cnt)
    return AbstractLatentBuildSlave.substantiate(self,*args,**kwargs)
  
  def insubstantiate(self,*args,**kwargs):
    with self.lock:
      cnt = int(file(self.countfile,"r").read())
      cnt -= 1
      log.msg("VBox (%s) substantiation counter: %d" % (self.vboxname,cnt))
      file(self.countfile,"w").write("%d" % cnt)
    if cnt == 0:
      return AbstractLatentBuildSlave.insubstantiate(self,*args,**kwargs)
    else:
      self._clearBuildWaitTimer()
      self.substantiated = False
      self.building.clear()
      return defer.succeed(True)

  def start_instance(self, build):
    self.immortal = False
    d = defer.succeed(True)
    def _start(res):
      log.msg("Starting a VBox (%s) in Headless mode" % self.vboxname)
      
      success = False
      p = subprocess.Popen(["/home/casadibot/testbot/helpers/virtualbox-headless","start",self.vboxname])
      p.wait()
        
      log.msg("Starting a VBox (%s): Done [%d]" % (self.vboxname,p.returncode))
      time.sleep(30) # Allow clock to sync 
      log.msg("Grace period for clock sync of VBox (%s): Done" % self.vboxname)
      return True 
    d.addCallback(_start)

    def _started(res):
      return True
    d.addCallback(_started)

    def _start_failed(failure):
      log.msg("Cannot start a VBox (%s), failing gracefully and triggering a new build check" % self.vboxname)
      log.err(failure)
      return False
    d.addErrback(_start_failed)

    return d

  def stop_instance(self, fast=False):
    d = defer.succeed(True)
    def _stop(res):
      if fast:
	log.msg("Stopping a VBox (%s) FAST" % self.vboxname)
      else:
      	log.msg("Stopping a VBox (%s)" % self.vboxname)
        if self.immortal:
          log.msg("Did not stop, because it is immortal (%s)" % (self.vboxname))
        else:
          p = subprocess.Popen(["/home/casadibot/testbot/helpers/virtualbox-headless","save",self.vboxname])
          p.wait()
          log.msg("Stopping a VBox (%s): Done [%d]" % (self.vboxname,p.returncode))
        return True
    d.addCallback(_stop)

    def _disconnect(res):
      log.msg("VM destroyed (%s): Forcing its connection closed." % self.vboxname)
      return AbstractBuildSlave.disconnect(self)
    #d.addCallback(_disconnect)
 
    def _disconnected(res):
      log.msg("We forced disconnection (%s), cleaning up and triggering new build" % self.name)
      self.botmaster.maybeStartBuildsForSlave(self.name)
      return res
    #.addBoth(_disconnected)

    return d

  def attached(self,bot):
    if self.substantiation_deferred is None:
      return defer.succeed(True)
    return AbstractBuildSlave.attached(self,bot)

  def buildFinished(self, *args, **kwargs):
      self.insubstantiate()

botpass = tbc.botpass

#vs1 = LibVirtSlave("windowsbot",botpass,vbc,"/home/casadibot/VirtualBox VMs/Win7-64/Win7-64.vdi",xml=file('/home/casadibot/slaves/Win7-64.xml').read())
#vs1.graceful_shutdown = True
#vs1.name= "Win7-64"

#vs2 = LibVirtSlave("linux32bot",botpass,vbc,"/home/casadibot/VirtualBox VMs/Ubuntu12.04-32/Ubuntu12.04-32.vdi",xml=file("/home/casadibot/slaves/Ubuntu12.04-32.xml").read())
#vs2.name = "Ubuntu12.04-32"
#vs2.graceful_shutdown = True

c['slaves'] = [
	BuildSlave("linuxbot", botpass),
	VBoxSlave("windowsbot",botpass,"Win7-64"),
	VBoxSlave("linux32bot",botpass,"Ubuntu12.04-32"),
	VBoxSlave("ubuntu12.04-64bot",botpass,"Ubuntu12.04-64")
]



# Create slaves with:
# buildslave create-slave documentationbot localhost:9989 documentationbot (botpass)

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

from buildbot.changes.gitpoller import GitPoller

repo_url = "git@github.com:casadi/casadi.git"
repo_url_read_only = "git://github.com/casadi/casadi.git"

git_poller = GitPoller(branch="develop",
                   repourl=repo_url,
                   pollInterval=60 # seconds
                   )
c['change_source'] = [ git_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly 
from buildbot.schedulers.forcesched import ForceScheduler

from buildbot.schedulers import basic, timed, triggerable
from buildbot.process import factory
from buildbot.steps import trigger

c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(name="trunkupdate-quick", branch="develop",
                                 builderNames=["quick","codegen"]))
c['schedulers'].append(Nightly(name="nightly-test", branch="develop",
                                 builderNames=["full"], hour = 2,
              onlyIfChanged=True,properties={'publish':'True'}))             
c['schedulers'].append(Nightly(name="nightly-cleanup", branch="develop",
                                 builderNames=["windows-reboot"], hour = 7)) # Windows Update is scheduled for 7am
             
c['schedulers'].append(ForceScheduler(name="force-quick",builderNames=["quick"]))                         
c['schedulers'].append(ForceScheduler(name="force-full",builderNames=["full"]))
c['schedulers'].append(ForceScheduler(name="force-codegen",builderNames=["codegen"]))

c['schedulers'].append(ForceScheduler(name="force-release-updater",builderNames=["release-updater"]))
c['schedulers'].append(ForceScheduler(name="force-windows-reboot",builderNames=["windows-reboot"]))

for b in ["linux-matlab","linux-minimal","ubuntu12.04-64-minimal","linux-minimal32","linux-nonfree32","linux-nonfree","linux-clang","windows-minimal","windows-vs2010","release-updater-windows-minimal","release-updater-linux-minimal","release-updater-linux-minimal32","release-updater-ubuntu12.04-64-minimal","linux-cmake","release-updater-linux-nonfree","release-updater-linux-nonfree32","release-updater-linux-distro32","release-updater-linux-distro","release-updater-linux-nonfree-distro32","release-updater-linux-nonfree-distro","linux-distro","linux-distro32","linux-nonfree-distro","linux-nonfree-distro32","linux-deb","linux-deb32","linux-minimal12.04-64"]:
  c['schedulers'].append(triggerable.Triggerable(name="trigger-"+b, builderNames=[b]))
  c['schedulers'].append(ForceScheduler(name="force-"+b,builderNames=[b]))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.process.properties import WithProperties
#from buildbot.process.properties import Interpolate
from buildbot.status.results import *

ifsuccess = lambda s, result: result==SUCCESS


commonenv_nolib = {"PYTHONPATH": WithProperties("%s/source/python_install", "workdir"), "CASADILIBDIR": WithProperties("%s/source/build/lib", "workdir"),"CC":"gcc-4.8","CXX":"g++-4.8","FC":"gfortran-4.8"}
commonenv_nolib32 = {"PYTHONPATH": WithProperties("%s/source/python_install", "workdir"), "CASADILIBDIR": WithProperties("%s/source/build/lib", "workdir")}
commonenv_nolib12 = commonenv_nolib32
commonenv = {"LD_LIBRARY_PATH": ":/opt/mosek/6/tools/platform/linux64x86/bin:/opt/knitro/lib:/opt/wsmp/wsmp-Linux64-GNU/lib:/opt:/usr/local/lib/","WORHP_LICENSE_FILE":"/opt/worhp/worhp.lic","KNITRO": "/opt/knitro","WORHP": "/home/casadibot/worhp-1.6.1","CMAKE_INCLUDE_PATH": "/opt/cplex/cplex/include:/opt/cplex/concert/include","CMAKE_LIBRARY_PATH": "/opt/cplex/cplex/lib/x86-64_sles10_4.1/static_pic/:/opt/cplex/concert/lib/x86-64_sles10_4.1/static_pic/","ILOG_LICENSE_FILE": "/opt/cplex/access.ilm","ZIENA_LICENSE": "/opt/knitro","SNOPT":"/home/casadibot/programs/snopt7","SQIC_INCLUDE_DIR":"/home/casadibot/sqic/mod", "SQIC_LIBRARY_DIR":"/home/casadibot/sqic/sqic-install/lib","CC":"gcc-4.8","CXX":"g++-4.8","FC":"gfortran-4.8","WSMP":"/home/casadibot/wsmp/wsmp-Linux64-GNU/lib","HSL":"/opt","IPOPT_DEFAULT_LINEAR_SOLVER":"ma57","METIS":"/opt","KNITRO_EXTRA_LIBS":"gomp"}

commonenv.update(commonenv_nolib)
commonenv_windows = {"PYTHONPATH": WithProperties("%s\\source\\python_install", "workdir") , "PATH": WithProperties(r"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Users\casadibot\AppData\Local\GitHub\PortableGit_015aa71ef18c047ce8509ffb2f9e4bb0e3e73f13\bin;C:\JModelica.org-SDK-1.8.1\MinGW\bin;C:\JModelica.org-SDK-1.8.1\SWIG;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Python27;C:\Python27\DLLs;C:\Python27\Scripts;C:\Program Files (x86)\pythonxy\SciTE-3.3.2-3;C:\Program Files (x86)\pythonxy\console;C:\MinGW32-xy\bin;C:\MinGW\bin;C:\MinGW\opt\swigwin-2.0.11;C:\MinGW\msys\1.0\bin;C:\Program Files (x86)\CMake 2.8\bin;C:\Python27\Lib\site-packages\PyQt4;C:\python27;C:\python27\DLLs;C:\Users\casadibot\Desktop\libraries;C:\Python27\Lib\site-packages\vtk;C:\Python27\gnuplot\binary;%s\source\python_install\casadi", "workdir") }

parflag = "-j4"

install_python = ["-D",WithProperties("PYTHON_PREFIX=%s/source/python_install","workdir"),"-D",WithProperties("CMAKE_INSTALL_PREFIX=%s/source/python_install","workdir")]
install_python_windows = ["-D",WithProperties("PYTHON_PREFIX=%s\\source\\python_install","workdir"),"-D",WithProperties("CMAKE_INSTALL_PREFIX=%s\\source\\python_install","workdir"),"-D","WITH_PYTHON=ON"]

install_matlab = ["-D",WithProperties("PYTHON_PREFIX=%s/source/python_install","workdir"),"-D",WithProperties("CMAKE_INSTALL_PREFIX=%s/source/matlab_install","workdir")]


build_features = [ i for f in ["PYTHON","JSON"] for i in ["-D","WITH_%s=ON" % f]]
# "LLVM" "OPENMP"
allfeatures = [ i for f in ["OOQP","OPENMP","DL","WORHP","PROFILING"] for i in ["-D","WITH_%s=ON" % f]]
allfeatures = build_features+ [ i for f in ["OOQP","WORHP","PROFILING","SLICOT","SNOPT"] for i in ["-D","WITH_%s=ON" % f]]

nonfree_extra_features = ["-D","WITH_PYTHON_INTERRUPTS=ON","-D","WITH_OPENMP=ON"]

minimalfeatures = [ i for f in ["OOQP","WORHP","KNITRO","CPLEX","OPENCL","LAPACK","DSDP","QPOASES"] for i in ["-D","WITH_%s=OFF" % f]] + ["-D","WITH_PROFILING=ON"]
freefeatures = [ i for f in ["OOQP","WORHP","KNITRO","CPLEX","OPENCL"] for i in ["-D","WITH_%s=OFF" % f]]+["-D","WITH_PROFILING=ON"]

minimalfeatures= build_features +freefeatures

nonfree_features = minimalfeatures + nonfree_extra_features

debipopt = {"IPOPT_DEFAULT_LINEAR_SOLVER":"ma57","LD_LIBRARY_PATH":"/opt"}
minimalipopt = {"PKG_CONFIG_PATH":"/home/casadibot/minimal-ipopt/lib/pkgconfig","LD_LIBRARY_PATH": "/opt"} #, "IPOPT_DEFAULT_LINEAR_SOLVER":"ma57"}
minimalipopt32 = {"PKG_CONFIG_PATH":"/home/casadibot/minimal-ipopt/lib/pkgconfig"}
minimalipopt12 = {"PKG_CONFIG_PATH":"/home/casadibot/minimal-ipopt/lib/pkgconfig"}
debipopt32 = {"PKG_CONFIG_PATH":"/home/casadibot/minimal-ipopt/lib/pkgconfig"}
minimalipopt.update(commonenv_nolib)
minimalipopt32.update(commonenv_nolib32)
minimalipopt12.update(commonenv_nolib12)
minimalipopt_nonfree = {"PKG_CONFIG_PATH":"/home/casadibot/nonfree-ipopt/lib/pkgconfig"}
minimalipopt_nonfree.update(commonenv_nolib)
minimalipopt_win = {"PKG_CONFIG_PATH":"C:\\Users\\casadibot\\CoinIpopt-install\\lib\\pkgconfig"}

matlabenv = dict(minimalipopt)
matlabenv.update({"PATH":"/home/casadibot/swig-install/share:/home/casadibot/swig-install/bin:/usr/local/bin:/usr/bin:/bin:","MATLABPATH":"/home/casadibot/slaves/linuxbot/linux-matlab/source/build/swig"})

def dictadd(a,b):
  c = dict(a)
  c.update(b)
  return c

def dictrm(a,b):
  c = dict(a)
  for i in b:
    del c[i]
  return c

nonfree_server="10.0.2.2"

def ifPublish(step):
  if not step.build.hasProperty('publish'):
    return False
  p = step.build.getProperties().getProperty('publish')
  return p =='True' or p=='true'

def ifTests(step):
  if not step.build.hasProperty('skiptests'):
    return True
  p = step.build.getProperties().getProperty('skiptests')
  return not(p =='True' or p=='true')

step_testbot_update_linux = ShellCommand(name="testbot update",command=["git","pull","origin","master"],workdir="/home/casadibot/testbot",decodeRC={0:SUCCESS,128:SUCCESS},haltOnFailure=True)
step_testbot_update_windows = ShellCommand(name="testbot update",command=["git","pull","origin","master"],workdir="C:\\Users\\casadibot\\testbot",decodeRC={0:SUCCESS,128:SUCCESS},haltOnFailure=True)

# Error code 128 is when a lock file exists. Might happen, because we run processes in parallel


f0 = factory.BuildFactory()
f0.addStep(Git(repourl=repo_url, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f0.addStep(ShellCommand(name="builddir",command=["mkdir","-p","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f0.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f0.addStep(ShellCommand(name="cmake",command=["cmake"]+allfeatures+["-D","WITH_WERROR=ON","-D","WITH_EXTRA_WARNINGS=ON"]+[".."],env=commonenv,workdir="source/build",haltOnFailure=True))
f0.addStep(ShellCommand(name="all",command=["make",parflag,"all"],workdir="source/build",haltOnFailure=True))
f0.addStep(ShellCommand(name="all",command=["make","lint"],workdir="source/build",haltOnFailure=True))
f0.addStep(ShellCommand(name="spell",command=["make","spell"],workdir="source/build",haltOnFailure=True,timeout=3600))

b0 = {'name': "quick",
      'slavename': "linuxbot",
      'builddir': "quick",
      'factory': f0,
      }


f1 = factory.BuildFactory()
f1.addStep(Git(repourl=repo_url, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f1.addStep(step_testbot_update_linux)
f1.addStep(ShellCommand(name="builddir",command=["mkdir","-p","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f1.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f1.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
#f1.addStep(ShellCommand(name="coverage report clean",command=["find",".","-name","*.gcda","-type","f","-delete"],workdir="source/build",haltOnFailure=True))
f1.addStep(ShellCommand(name="cmake",command=["cmake"] + install_python + allfeatures + ["-D","WITH_DOC=ON","-D","WITH_EXAMPLES=ON","-D","WITH_COVERAGE=ON","-D","WITH_WERROR=ON","-D","WITH_EXTRA_WARNINGS=ON",".."],env=commonenv,workdir="source/build",haltOnFailure=True))
f1.addStep(ShellCommand(name="all",command=["make",parflag,"all"],workdir="source/build",haltOnFailure=True))
f1.addStep(ShellCommand(name="all",command=["make","lint"],workdir="source/build",haltOnFailure=True))
f1.addStep(ShellCommand(name="python",command=["make",parflag,"python"],workdir="source/build",haltOnFailure=True,timeout=3600))
f1.addStep(ShellCommand(name="install_python",command=["make","install","install_python"],workdir="source/build",haltOnFailure=True,timeout=3600))
f1.addStep(ShellCommand(name="test modules", command=["python","-c","from casadi import *;print loaded_modules ; print failed_modules; assert len(failed_modules)==0"],env=commonenv, timeout=7200,haltOnFailure=True ))
f1.addStep(ShellCommand(name="test plugins", command=["python","-c","from casadi.tools import *;loadAllCompiledPlugins()"],env=commonenv, timeout=7200,haltOnFailure=True ))
f1.addStep(ShellCommand(name="trunktesterbot", command=["make","trunktesterbot","MEMCHECK=-memcheck"],workdir="source/test",env=commonenv, timeout=7200,haltOnFailure=True ))
#f1.addStep(ShellCommand(name="coverage report harvest", command=["lcov","--capture","--directory",".","--output-file","coverage.info"],workdir="source/build",env=commonenv, timeout=7200,haltOnFailure=False, decodeRC={0:SUCCESS,255:WARNINGS},warnOnFailure=True  ))
#f1.addStep(ShellCommand(name="coverage report compile", command=["genhtml","coverage.info","--output-directory","out"],workdir="source/build",env=commonenv, timeout=7200,haltOnFailure=False,warnOnFailure=True ))
#f1.addStep(ShellCommand(name="publish coverage", command=["python","/home/casadibot/testbot/helpers/publish_coverage.py"],workdir="source/build/out",env=commonenv,haltOnFailure=False,warnOnFailure=True))
f1.addStep(ShellCommand(name="json",command=["make","json"],workdir="source/build",haltOnFailure=True,timeout=3600))
f1.addStep(ShellCommand(name="spell",command=["make","spell"],workdir="source/build",haltOnFailure=True,timeout=3600))
f1.addStep(ShellCommand(name="generatedocs",command=["make","full"],workdir="source/docs/api",env=commonenv,haltOnFailure=True))
f1.addStep(ShellCommand(name="publish", command=["python","/home/casadibot/testbot/helpers/publish_doc.py"],workdir="source/docs",env=commonenv,haltOnFailure=True,doStepIf=ifPublish))
f1.addStep(ShellCommand(name="pull",command=["git","pull",repo_url,"develop"],workdir="source",haltOnFailure=True,doStepIf=ifPublish))
f1.addStep(ShellCommand(name="documentation commit", command=["sh","/home/casadibot/testbot/helpers/acommit.sh","automatic documentation update"],workdir="source",haltOnFailure=True,doStepIf=ifPublish))
f1.addStep(ShellCommand(name="push",command=["git","push",repo_url,"develop"],workdir="source",haltOnFailure=True,doStepIf=ifPublish))
f1.addStep(trigger.Trigger(name="compilers",schedulerNames=['trigger-windows-vs2010',"trigger-linux-matlab","trigger-linux-clang"],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
f1.addStep(trigger.Trigger(name="releases",schedulerNames=['trigger-windows-minimal','trigger-linux-minimal','trigger-linux-minimal32'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
f1.addStep(trigger.Trigger(name="releases",schedulerNames=['trigger-linux-minimal12.04-64'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
f1.addStep(trigger.Trigger(name="distro",schedulerNames=['trigger-linux-distro','trigger-linux-distro32'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
#f1.addStep(trigger.Trigger(name="deb",schedulerNames=['trigger-linux-deb','trigger-linux-deb32'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
#f1.addStep(trigger.Trigger(name="nonfree",schedulerNames=['trigger-linux-nonfree32','trigger-linux-nonfree'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
#f1.addStep(trigger.Trigger(name="nonfree-distro",schedulerNames=['trigger-linux-nonfree-distro32','trigger-linux-nonfree-distro'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
f1.addStep(ShellCommand(name="tested commit", command=["sh","/home/casadibot/testbot/helpers/stablebranchcommit.sh",repo_url],workdir="source",haltOnFailure=True,doStepIf=ifPublish  ))
f1.addStep(ShellCommand(name="purge", command=["python","/home/casadibot/testbot/helpers/purge_builds.py"],env=commonenv,haltOnFailure=True,doStepIf=ifPublish))

b1 = {'name': "full",
      'slavename': "linuxbot",
      'builddir': "full",
      'factory': f1,
      }

f3 = factory.BuildFactory()
f3.addStep(Git(repourl=repo_url, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f3.addStep(step_testbot_update_linux)
f3.addStep(ShellCommand(name="python",command=["python","autogencode.py"],workdir="source/misc",haltOnFailure=True))
f3.addStep(ShellCommand(name="commit", command=["sh","/home/casadibot/testbot/helpers/acommit.sh","automatic code generation"],workdir="source",haltOnFailure=True))
f3.addStep(ShellCommand(name="pull",command=["git","pull",repo_url,"develop"],workdir="source",haltOnFailure=True))
f3.addStep(ShellCommand(name="push",command=["git","push",repo_url,"develop"],workdir="source",haltOnFailure=True))

b3 = {'name': "codegen",
      'slavename': "linuxbot",
      'builddir': "codegen",
      'factory': f3,
      }

f4 = factory.BuildFactory()
f4.addStep(Git(repourl=repo_url, mode="update",haltOnFailure=True,workdir="source"))
f4.addStep(step_testbot_update_linux)
f4.addStep(ShellCommand(name="autogencode",command=["python","autogencode.py"],workdir="source/misc",haltOnFailure=True))
f4.addStep(ShellCommand(name="builddir",command=["mkdir","-p","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f4.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f4.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
f4.addStep(ShellCommand(name="cmake",command=["cmake","-D","WITH_DOC=ON"] + install_python + allfeatures + [".."],env=commonenv,workdir="source/build",haltOnFailure=True))
f4.addStep(ShellCommand(name="all",command=["make","all",parflag],workdir="source/build",haltOnFailure=True))
f4.addStep(ShellCommand(name="python",command=["make",parflag,"python"],workdir="source/build",haltOnFailure=True,timeout=3600))
f4.addStep(ShellCommand(name="install_python",command=["make","install","install_python"],workdir="source/build",haltOnFailure=True,timeout=3600))
f4.addStep(ShellCommand(name="test interfaces", command=["python","-c","from casadi import *;print loaded_modules ; print failed_modules; assert len(failed_modules)==0"],env=commonenv, timeout=7200,haltOnFailure=True ))
f4.addStep(ShellCommand(name="test plugins", command=["python","-c","from casadi.tools import *;loadAllCompiledPlugins()"],env=commonenv, timeout=7200,haltOnFailure=True ))
f4.addStep(ShellCommand(name="trunktesterbot", command=["make","trunktesterbot","MEMCHECK=-memcheck"],workdir="source/test",env=commonenv, timeout=7200,haltOnFailure=True ))
f4.addStep(ShellCommand(name="json",command=["make","json"],workdir="source/build",haltOnFailure=True,timeout=3600))
f4.addStep(ShellCommand(name="spell",command=["make","spell"],workdir="source/build",haltOnFailure=True,timeout=3600))
f4.addStep(trigger.Trigger(name="free",schedulerNames=['trigger-release-updater-windows-minimal','trigger-release-updater-linux-minimal','trigger-release-updater-linux-minimal32'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'reason','publish' ]))
f4.addStep(trigger.Trigger(name="free",schedulerNames=['trigger-release-updater-linux-minimal12.04-64'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'reason','publish' ]))
f4.addStep(trigger.Trigger(name="distro",schedulerNames=['trigger-release-updater-linux-distro','trigger-release-updater-linux-distro32'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'reason','publish' ]))
#f4.addStep(trigger.Trigger(name="nonfree",schedulerNames=['trigger-release-updater-linux-nonfree32','trigger-release-updater-linux-nonfree'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
#f4.addStep(trigger.Trigger(name="nonfree-distro",schedulerNames=['trigger-release-updater-linux-nonfree-distro32','trigger-release-updater-linux-nonfree-distro'],waitForFinish=True,haltOnFailure=True,copy_properties=[ 'publish' ]))
f4.addStep(ShellCommand(name="generatedocs",command=["make","full",WithProperties("REVISION=%s","reason")],workdir="source/docs/api",env=commonenv,haltOnFailure=True))
f4.addStep(ShellCommand(name="commit", command=["sh","/home/casadibot/testbot/helpers/acommit.sh","release-update commit"],workdir="source",haltOnFailure=True))
f4.addStep(ShellCommand(name="publish",command=["python","/home/casadibot/testbot/helpers/publish_doc.py"],workdir="source/docs",env=commonenv,haltOnFailure=True))
f4.addStep(ShellCommand(name="push",command=["git","push",repo_url,WithProperties('%s',"branch")],workdir="source",haltOnFailure=True))

b4 = {'name': "release-updater",
        'slavename': 'linuxbot',
        'builddir':"release-update",
        'factory': f4
      }




f5 = factory.BuildFactory()
f5.addStep(Git(repourl=repo_url_read_only, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f5.addStep(step_testbot_update_windows)
f5.addStep(ShellCommand(name="builddir",command=["python","C:\\Users\\casadibot\\testbot\\helpers\\mkdirp.py","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f5.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f5.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
f5.addStep(ShellCommand(name="cmake",command=["cmake","-G","MSYS Makefiles"]+ install_python_windows + [ ".."],workdir="source/build",haltOnFailure=True,env=minimalipopt_win))
f5.addStep(ShellCommand(name="python",command=["make","python"],workdir="source/build",haltOnFailure=True,timeout=3600))
f5.addStep(ShellCommand(name="install_python",command=["make","install","install_python"],workdir="source/build",haltOnFailure=True,timeout=3600))
f5.addStep(ShellCommand(name="test interfaces", command=["python","-c","from casadi import *;print loaded_modules ; print failed_modules; assert len(failed_modules)==0"],env=commonenv_windows, timeout=7200,haltOnFailure=True ))
f5.addStep(ShellCommand(name="trunktesterbot (reduced)", command=["make","unittests_py","examples_code_py"],env=commonenv_windows,workdir="source/test", timeout=7200,haltOnFailure=True ))
f5.addStep(ShellCommand(name="publish", command=["python","C:\\Users\\casadibot\\testbot\\helpers\\publish_builds_win64.py"],env=commonenv_windows,workdir="source", timeout=7200,haltOnFailure=True,doStepIf=ifPublish ))

b5 = {'name': "windows-minimal",
        'slavename': 'windowsbot',
        'builddir':"windows-minimal",
        'factory': f5
      }

b6 = {'name': "release-updater-windows-minimal",
        'slavename': 'windowsbot',
        'builddir':"windows-release-update",
        'factory': f5
     }



def staticbuild_linux(features,ipoptenv,publish_script,nonfree_server="localhost"):
  f = factory.BuildFactory()
  f.addStep(Git(repourl=repo_url_read_only, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
  f.addStep(step_testbot_update_linux)
  f.addStep(ShellCommand(name="builddir",command=["mkdir","-p","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
  f.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
  f.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
  f.addStep(ShellCommand(name="cmake",command=["cmake"] + install_python + features + ["-D","ENABLE_STATIC=OFF","-D","ENABLE_SHARED=ON"] + [".."],env=ipoptenv,workdir="source/build",haltOnFailure=True))
  f.addStep(ShellCommand(name="python",command=["make","python"],workdir="source/build",env=ipoptenv,haltOnFailure=True,timeout=3600))
  f.addStep(ShellCommand(name="install_python",command=["make","install","install_python"],workdir="source/build",env=ipoptenv,haltOnFailure=True,timeout=3600))
  f.addStep(ShellCommand(name="json",command=["make","json"],workdir="source/build",haltOnFailure=True,timeout=3600))
  f.addStep(ShellCommand(name="test interfaces", command=["python","-c","from casadi import *;print loaded_modules ; print failed_modules; assert len(failed_modules)==0"],env=ipoptenv, timeout=7200,haltOnFailure=True ))
  f.addStep(ShellCommand(name="trunktesterbot (reduced)", command=["make","unittests_py","examples_code_py"],workdir="source/test",env=ipoptenv, timeout=7200,haltOnFailure=True ,doStepIf=ifTests))
  f.addStep(ShellCommand(name="publish", command=["python","/home/casadibot/testbot/helpers/" + publish_script],workdir="source",env=dictadd(ipoptenv,{"NONFREE_SERVER":nonfree_server}), timeout=7200,haltOnFailure=True,doStepIf=ifPublish))
  return f
  
def distrobuild_linux(features,ipoptenv,publish_script,nonfree_server="localhost"):
  f = factory.BuildFactory()
  f.addStep(Git(repourl=repo_url_read_only, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
  f.addStep(step_testbot_update_linux)
  for build in ["build-shared"]:
    f.addStep(ShellCommand(name="builddir",command=["mkdir","-p",build],
   hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
    f.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/"+build,haltOnFailure=True))
    f.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
    f.addStep(ShellCommand(name="dist clean",command="rm -f *.deb",workdir="source/"+build,haltOnFailure=True))
    f.addStep(ShellCommand(name="extra_install",command=["python","/home/casadibot/testbot/helpers/extra_install.py"],env=ipoptenv,workdir="source/"+build,haltOnFailure=True))
    f.addStep(ShellCommand(name="cmake",command=["cmake"] + install_python + features + ["-D","ENABLE_STATIC=OFF","-D","ENABLE_SHARED=ON","-D","CPACK_GENERATOR=DEB","-D",WithProperties("EXTRA_CMAKE=%s/source/" + build + "/extra_install.cmake", "workdir")] + [".."],env=ipoptenv,workdir="source/"+build,haltOnFailure=True))
    f.addStep(ShellCommand(name="json interface",command=["make","json"],env=ipoptenv,workdir="source/"+build,haltOnFailure=True))
    f.addStep(ShellCommand(name="make",command=["make","package"],env=ipoptenv,workdir="source/"+build,haltOnFailure=True))
    f.addStep(ShellCommand(name="publish", command=["python","/home/casadibot/testbot/helpers/" + publish_script],workdir="source/"+build,env=dictadd(ipoptenv,{"NONFREE_SERVER":nonfree_server}), timeout=7200,haltOnFailure=True,doStepIf=ifPublish))
  return f
  
  
def debbuild(features,ipoptenv):
  f = factory.BuildFactory()
  f.addStep(Git(repourl=repo_url_read_only, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
  f.addStep(ShellCommand(name="dist clean",command="rm -rf debbuild",workdir="source",haltOnFailure=True))
  f.addStep(ShellCommand(name="dist clean",command=["mkdir","debbuild"],workdir="source",haltOnFailure=True))
  f.addStep(ShellCommand(name="dist clean",command=["ln","-s","..","src"],workdir="source/debbuild",haltOnFailure=True))
  f.addStep(ShellCommand(name="dist clean",command="rm -rf build",workdir="source",haltOnFailure=True))
  f.addStep(ShellCommand(name="debuild",command=["debuild","-eDEB_BUILD_OPTIONS=parallel=6","-us","-uc"],
   hideStepIf=ifsuccess, workdir="source/debbuild/src" ,haltOnFailure=True,env=ipoptenv))
  
  return f


b7 = {'name': "linux-minimal",
      'slavename': "linuxbot",
      'builddir': "minimal",
      'factory': staticbuild_linux(allfeatures,minimalipopt,"publish_builds.py")
      }

b7b = {'name': "linux-minimal12.04-64",
      'slavename': "ubuntu12.04-64bot",
      'builddir': "minimal12.04-64",
      'factory': staticbuild_linux(allfeatures,dictrm(minimalipopt,["CXX","FC","CC"]),"publish_builds.py")
      }


b8 = {'name': "release-updater-linux-minimal",
        'slavename': 'linuxbot',
        'builddir':"release-update-minimal",
        'factory': staticbuild_linux(allfeatures,minimalipopt,"publish_builds.py")
     }   
     
b7_d = {'name': "linux-distro",
      'slavename': "linuxbot",
      'builddir': "distro",
      'factory': distrobuild_linux(allfeatures,minimalipopt,"publish_builds_distro.py")
      }

b8_d = {'name': "release-updater-linux-distro",
        'slavename': 'linuxbot',
        'builddir':"release-update-distro",
        'factory': distrobuild_linux(allfeatures,minimalipopt,"publish_builds_distro.py")
     }  
     
b7_deb = {'name': "linux-deb",
      'slavename': "linuxbot",
      'builddir': "deb",
      'factory': debbuild(allfeatures,debipopt)
      }


f9 = factory.BuildFactory()
f9.addStep(Git(repourl=repo_url_read_only, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f9.addStep(step_testbot_update_windows)
f9.addStep(ShellCommand(name="builddir",command=["python","C:\\Users\\casadibot\\testbot\\helpers\\mkdirp.py","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f9.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f9.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
f9.addStep(ShellCommand(name="cmake",command=["cmake","-G","Visual Studio 10"] + install_python_windows + ["..","-DWITH_IPOPT=OFF"],workdir="source/build",haltOnFailure=True))
f9.addStep(ShellCommand(name="vs2010",command=["cmake","--build",".","--target","python","--config","Release"],workdir="source/build",haltOnFailure=True,timeout=3600))
f9.addStep(ShellCommand(name="vs2010 install",command=["cmake",WithProperties("-DCMAKE_INSTALL_PREFIX=%s\\source\\python_install","workdir") ,"-P","cmake_install.cmake"],workdir="source/build/swig",haltOnFailure=True,timeout=3600))
f9.addStep(ShellCommand(name="test interfaces", command=["python","-c","from casadi import *;print loaded_modules ; print failed_modules; assert len(failed_modules)==0"],env=commonenv_windows, timeout=7200,haltOnFailure=True ))
#f9.addStep(ShellCommand(name="trunktesterbot (reduced)", command=["make","unittests_py"],workdir="source/test",env=commonenv_windows, timeout=7200,haltOnFailure=True ))

b9 = {'name': "windows-vs2010",
        'slavename': 'windowsbot',
        'builddir':"windows-vs2010",
        'factory': f9
      }

f10 = factory.BuildFactory()
f10.addStep(Git(repourl=repo_url, branch="develop",mode="update",haltOnFailure=True,workdir="source")) 
f10.addStep(step_testbot_update_linux)
f10.addStep(ShellCommand(name="builddir",command=["mkdir","-p","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
clang = dict(commonenv)
clang.update({"CC":"/usr/bin/clang", "CXX": "/usr/bin/clang++"})
f10.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f10.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
f10.addStep(ShellCommand(name="cmake",command=["cmake"] + install_python + allfeatures + [".."],env=clang,workdir="source/build",haltOnFailure=True))
f10.addStep(ShellCommand(name="python",command=["make",parflag,"python"],workdir="source/build",env=clang,haltOnFailure=True,timeout=3600))
f10.addStep(ShellCommand(name="install_python",command=["make","install","install_python"],workdir="source/build",env=clang,haltOnFailure=True,timeout=3600))
f10.addStep(ShellCommand(name="test interfaces", command=["python","-c","from casadi import *;print loaded_modules ; print failed_modules; assert len(failed_modules)==0"],env=commonenv, timeout=7200,haltOnFailure=True ))
f10.addStep(ShellCommand(name="trunktesterbot (reduced)", command=["make","unittests_py"],workdir="source/test",env=clang, timeout=7200,haltOnFailure=True ))

b10 = {'name': "linux-clang",
      'slavename': "linuxbot",
      'builddir': "clang",
      'factory': f10,
      }
      

b11 = {'name': "linux-minimal32",
      'slavename': "linux32bot",
      'builddir': "minimal32",
      'factory': staticbuild_linux(minimalfeatures,minimalipopt32,"publish_builds.py",nonfree_server=nonfree_server)
      }

b12 = {'name': "release-updater-linux-minimal32",
        'slavename': 'linux32bot',
        'builddir':"release-update-minimal32",
        'factory': staticbuild_linux(minimalfeatures,minimalipopt32,"publish_builds.py",nonfree_server=nonfree_server)
     }   
     
b11_64 = {'name': "ubuntu12.04-64-minimal",
      'slavename': "ubuntu12.04-64bot",
      'builddir': "ubuntu12.04-64-minimal",
      'factory': staticbuild_linux(minimalfeatures,minimalipopt12,"publish_builds.py",nonfree_server=nonfree_server)
      }

b12_64 = {'name': "release-updater-ubuntu12.04-64-minimal",
        'slavename': 'ubuntu12.04-64bot',
        'builddir':"release-update-ubuntu12.04-64-minimal",
        'factory': staticbuild_linux(minimalfeatures,minimalipopt12,"publish_builds.py",nonfree_server=nonfree_server)
     }   
     
b11_d = {'name': "linux-distro32",
      'slavename': "linux32bot",
      'builddir': "distro32",
      'factory': distrobuild_linux(minimalfeatures,minimalipopt32,"publish_builds_distro.py")
      }
      
b11_deb = {'name': "linux-deb32",
      'slavename': "linuxbot",
      'builddir': "deb32",
      'factory': debbuild(allfeatures,debipopt32)
      }

b12_d = {'name': "release-updater-linux-distro32",
        'slavename': 'linux32bot',
        'builddir':"release-update-distro32",
        'factory': distrobuild_linux(minimalfeatures,minimalipopt32,"publish_builds_distro.py")
     }  


b13 = {'name': "linux-nonfree32",
      'slavename': "linux32bot",
      'builddir': "nonfree32",
      'factory': staticbuild_linux(nonfree_features,minimalipopt_nonfree,"publish_builds_nonfree.py",nonfree_server=nonfree_server)
      }

b14 = {'name': "linux-nonfree",
      'slavename': "ubuntu12.04-64bot",
      'builddir': "nonfree",
      'factory': staticbuild_linux(nonfree_features,dictrm(minimalipopt_nonfree,["CXX","CC","FC"]),"publish_builds_nonfree.py",nonfree_server=nonfree_server)
      }

b15 = {'name': "release-updater-linux-nonfree32",
      'slavename': "linux32bot",
      'builddir': "release-updater-linux-nonfree32",
      'factory': staticbuild_linux(nonfree_features,minimalipopt_nonfree,"publish_builds_nonfree.py",nonfree_server=nonfree_server)
     }

b16 = {'name': "release-updater-linux-nonfree",
      'slavename': "linuxbot",
      'builddir': "release-updater-linux-nonfree",
      'factory': staticbuild_linux(nonfree_features,minimalipopt_nonfree,"publish_builds_nonfree.py")
      }
      
b13_d = {'name': "linux-nonfree-distro32",
      'slavename': "linux32bot",
      'builddir': "nonfree-distro32",
      'factory': distrobuild_linux(nonfree_features,minimalipopt_nonfree,"publish_builds_nonfree_distro.py")
      }
      
b14_d = {'name': "linux-nonfree-distro",
      'slavename': "ubuntu12.04-64bot",
      'builddir': "nonfree-distro12.04-64",
      'factory': distrobuild_linux(nonfree_features,dictrm(minimalipopt_nonfree,["CXX","CC","FC"]),"publish_builds_nonfree_distro.py",nonfree_server=nonfree_server)
      }

b15_d = {'name': "release-updater-linux-nonfree-distro32",
        'slavename': 'linux32bot',
        'builddir':"release-update-nonfree-distro32",
        'factory': distrobuild_linux(nonfree_features,minimalipopt_nonfree,"publish_builds_nonfree_distro.py")
     }  

b16_d = {'name': "release-updater-linux-nonfree-distro",
        'slavename': 'linuxbot',
        'builddir':"release-update-nonfree-distro",
        'factory': distrobuild_linux(nonfree_features,minimalipopt_nonfree,"publish_builds_nonfree_distro.py")
     }  

f17 = factory.BuildFactory()
f17.addStep(Git(repourl=repo_url, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f17.addStep(step_testbot_update_linux)
f17.addStep(ShellCommand(name="builddir cmake 2.8.0",command=["mkdir","-p","build2.8.0"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f17.addStep(ShellCommand(name="cmake 2.8.0 clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build2.8.0",haltOnFailure=True))
f17.addStep(ShellCommand(name="cmake 2.8.0",command=["/home/casadibot/programs/cmake/cmake-2.8.0-install/bin/cmake"] + allfeatures + [".."],workdir="source/build2.8.0",haltOnFailure=True))
f17.addStep(ShellCommand(name="builddir cmake 2.6.0",command=["mkdir","-p","build2.6.0"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f17.addStep(ShellCommand(name="cmake 2.6.0 clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build2.6.0",haltOnFailure=True))
f17.addStep(ShellCommand(name="cmake 2.6.0",command=["/home/casadibot/programs/cmake/cmake-2.6.0-install/bin/cmake"] + allfeatures + [".."],workdir="source/build2.6.0",haltOnFailure=True))

b17 = {'name': "linux-cmake",
      'slavename': "linuxbot",
      'builddir': "cmake",
      'factory': f17,
      }

f18 = factory.BuildFactory()
f18.addStep(ShellCommand(name="shutdown command",command=["shutdown","/t","0","/s","/f"])) 
f18.addStep(DisconnectStep(name="waiting",command=["python.exe","-c","import time;time.sleep(1800)"], 
                     warnOnFailure=False,
                     flunkOnFailure=False,
                     alwaysRun=True,
                     decodeRC={0:SUCCESS,1:SUCCESS},
                     ))

b18 = {'name': "windows-reboot",
        'slavename': 'windowsbot',
        'builddir':"windows-reboot",
        'factory': f18
      }
      
f19 = factory.BuildFactory()
f19.addStep(Git(repourl=repo_url, branch="develop",mode="update",haltOnFailure=True,workdir="source"))
f19.addStep(step_testbot_update_linux)
f19.addStep(ShellCommand(name="swig-matlab pull",command=["git","pull"],workdir="/home/casadibot/swig/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="swig-matlab configure",command=["../configure","--prefix=/home/casadibot/swig-install"],workdir="/home/casadibot/swig/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="swig-matlab make",command=["make",parflag],workdir="/home/casadibot/swig/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="swig-matlab install",command=["make","install"],workdir="/home/casadibot/swig/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="builddir",command=["mkdir","-p","build"], hideStepIf=ifsuccess, workdir="source" ,haltOnFailure=True))
f19.addStep(ShellCommand(name="cmake clean",command=["rm","-f","CMakeCache.txt"],workdir="source/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="install clean",command=["rm","-rf","python_install"],workdir="source",haltOnFailure=True))
f19.addStep(ShellCommand(name="cmake",command=["cmake","-D",'MATLAB_EXTRA_CXXFLAGS="-D__STDC_UTF_16__"'] + install_matlab + allfeatures + ["-D","ENABLE_STATIC=OFF","-D","ENABLE_SHARED=ON","-D","WITH_MATLAB=ON"] + [".."],env=matlabenv,workdir="source/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="all",command=["make",parflag,"matlab"],env=matlabenv,workdir="source/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="all",command=["make","install"],env=matlabenv,workdir="source/build",haltOnFailure=True))
f19.addStep(ShellCommand(name="mex",command=["python","/home/casadibot/testbot/helpers/compilemex.py"],env=matlabenv,workdir="source/build/swig",haltOnFailure=True))
f19.addStep(ShellCommand(name="unittests",command=["make","unittests_matlab"],env=matlabenv,workdir="source/test",haltOnFailure=True))

b19 = {'name': "linux-matlab",
      'slavename': "linuxbot",
      'builddir': "linux-matlab",
      'factory': f19,
      }

c['builders'] = [b0,b1,b3,b4,b5,b6,b7,b7_d,b7_deb,b7b,b8,b8_d,b9,b10,b11,b11_d,b11_deb,b12,b12_d,b11_64,b12_64,b13,b13_d,b14,b14_d,b15,b15_d,b16,b16_d,b17,b18,b19]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
from buildbot.status import html

from buildbot.status.web import authz, auth

buildbot_user, buildbot_pass = tbc.buildbotweb

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([(buildbot_user, buildbot_pass)]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = True,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))


import smtplib
import yaml

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


from zope.interface import implements
from buildbot.interfaces import IStatusReceiver
from twisted.application import service

from zope.interface import implements
from buildbot import interfaces
from twisted.python import log as twlog

from buildbot.status import base


def notify(name,rev,logtext):
  print "Notifying %s" % name
  # Load the yaml file that maps developer nicks to emails
  developers = yaml.load(file('developers.yaml','r'))
  
  # If the nick is unkwnown, send it to the testbot maintainer
  if not(name in developers):
    name = 'testbot_dev'
    
  # Here is the mail message
  to = developers[name]
  msg = MIMEMultipart()
  msg.attach(MIMEText("Hello!\n\nThe automated CasADi testing bot was looking into revisions %s and found that errors where introduced. Please check the attached logfile. If you receive this e-mail by mistake, please reply.\n\nHave a nice day!" % rev, 'plain'))
  logf = MIMEText(logtext, _subtype='text')
  logf.add_header('Content-Disposition', 'attachment', filename='log.txt')
  msg.attach(logf)
  msg['Subject'] = 'CasADi automated test report [%s]' % rev
  msg['From'] = developers['testbot']
  msg['To'] = to
  msg['Cc'] = developers['testbot_dev']
  s = smtplib.SMTP_SSL('smtp.gmail.com',465)
  gmail_user, gmail_pass = tbc.gmail
  print s.login(gmail_user, gmail_pass)
  s.sendmail(developers['testbot'], [to], msg.as_string())
  print "sent to %s" % to
  s.quit()
  
class MyMailer(base.StatusReceiverMultiService):
  implements(IStatusReceiver)
  
  def __init__(self):
    base.StatusReceiverMultiService.__init__(self)
    self.watched = []

  def setServiceParent(self,parent):
    base.StatusReceiverMultiService.setServiceParent(self, parent)
    self.master_status = self.parent
    self.master_status.subscribe(self)
    self.master = self.master_status.master

  def disownServiceParent(self):
    self.master_status.unsubscribe(self)
    self.master_status = None
    for w in self.watched:
        w.unsubscribe(self)
    return base.StatusReceiverMultiService.disownServiceParent(self)

  def builderAdded(self, name, builder):
    if builder.name == 'full' or builder.name == 'quick':
      self.watched.append(builder)
      return self # subscribe to this builder
        
  def buildFinished(self, name, build, results):
    returnstate  = build.getResults()
    
    logtext = ""
    for log in build.getLogs():
      if log.step.results == FAILURE:
         logtext += "=== log for step '%s' === \n%s\n" % (log.step.name,log.getText())

    if returnstate == FAILURE:
      for b in build.blamelist:
        notify(b,build.getRevisions(),logtext)
    elif returnstate == EXCEPTION:
      logtext = "Experiencing internal troubles" + logtext
      notify('testbot_dev',build.getRevisions(),logtext)
    
c['status'].append(MyMailer())


def trunkstatus(wikitext, comment):
  import subprocess
  subprocess.Popen(["git","pull"],cwd="/home/casadibot/wiki").wait()
  f = file('/home/casadibot/wiki/trunkstate.md','w')
  f.write(wikitext)
  f.close()
  subprocess.Popen(["git","add","trunkstate.md"],cwd="/home/casadibot/wiki").wait()
  subprocess.Popen(["git","commit","-m",comment],cwd="/home/casadibot/wiki").wait()
  subprocess.Popen(["git","push","origin"],cwd="/home/casadibot/wiki").wait()
  
  print "*** TRUNK status was sent ***"

from github import *

githubname, githubpass = tbc.github

def githubcommitcomment(org,repo,commit,message):
  g = Github( githubname, githubpass )
  g.get_organization(org).get_repo(repo).get_commit(commit).create_comment(message)


def githubcommitstatus(org,repo,commit,state,description,url=""):
  g = Github( githubname, githubpass )
  g.get_organization(org).get_repo(repo).get_commit(commit).create_status(state,url,description)

from zope.interface import implements
from buildbot.interfaces import IStatusReceiver
from twisted.application import service

class MyNotifier(base.StatusReceiverMultiService):
  implements(IStatusReceiver)
  
  def __init__(self):
    base.StatusReceiverMultiService.__init__(self)
    self.watched = []

  def setServiceParent(self,parent):
    base.StatusReceiverMultiService.setServiceParent(self, parent)
    self.master_status = self.parent
    self.master_status.subscribe(self)
    self.master = self.master_status.master

  def disownServiceParent(self):
    self.master_status.unsubscribe(self)
    self.master_status = None
    for w in self.watched:
        w.unsubscribe(self)
    return base.StatusReceiverMultiService.disownServiceParent(self)

  def builderAdded(self, name, builder):
#    if builder.name == 'full' or builder.name == 'quick':
     self.watched.append(builder)
     return self # subscribe to this builder
        

  def buildStarted(self,name,build):
    builder = build.getBuilder().name
    # Cannot obtain revision, because the Source step has not been executed yet
    # githubcommitstatus("casadi","casadi",build.getProperty("got_revision"),"pending","%s is checking." % builder)

  def buildFinished(self, name, build, results):
    twlog.msg("Mynotifier fired!")
    twlog.msg(str(build.getProperties()))
    builder = build.getBuilder().name
    returnstate  = build.getResults()
    if returnstate == SUCCESS or  returnstate == WARNINGS:
      if build.getBuilder().getBuild(-1).getResults() not in [SUCCESS, WARNINGS]:
        githubcommitcomment("casadi","casadi",build.getProperty("got_revision"),"Approved by %s." % builder)
      if build.getProperty("branch")=="develop":
        githubcommitstatus("casadi","casadi",build.getProperty("got_revision"),"success","Approved by %s." % builder)
      if builder == "full" and build.getProperty("branch")=="develop":
        trunkstatus("The [develop branch](/casadi/casadi/tree/develop) was found WORKING by [[trunktesterbot]]. The last checked revision was [%s](https://github.com/casadi/casadi/commit/%s), changelist %s" % (build.getProperty("got_revision"),build.getProperty("got_revision"),build.getRevisions()), "trunk state WORKING %s" % build.getProperty("got_revision"))
    elif returnstate == EXCEPTION:
      if builder == "full" and build.getProperty("branch")=="develop":
        trunkstatus("The [develop branch](/casadi/casadi/tree/develop) failed to be tested by [[trunktesterbot]], it is experiencing internal problems. The last checked revision was [%s](https://github.com/casadi/casadi/commit/%s), changelist %s" % (build.getProperty("got_revision"),build.getProperty("got_revision"),build.getRevisions()), "trunk state UNKNOWN %s" % build.getProperty("got_revision"))
      #githubcommitcomment("casadi","casadi",build.getProperty("got_revision"),"%s experienced internal trouble.\n%s" % (builder,logs[-5000:]))
      #githubcommitstatus("casadi","casadi",build.getProperty("got_revision"),"error","%s experienced trouble." % builder)
    elif returnstate == FAILURE:
      logs = ""
      for log in build.getLogs():
        if log.step.results == FAILURE:
          logs += "Here's the log file for step '%s': \n```\n%s\n```\n" % (log.step.name,log.getText())
      if builder == "full" and build.getProperty("branch")=="develop":
      	trunkstatus("The [develop branch](/casadi/casadi/tree/develop) was found BROKEN by [[trunktesterbot]]. The last checked revision was [%s](https://github.com/casadi/casadi/commit/%s), changelist %s. \n %s" % (build.getProperty("got_revision"),build.getProperty("got_revision"),build.getRevisions(),logs), "trunk state BROKEN %s" % build.getProperty("got_revision"))
      if build.getProperty("branch")=="develop":
        githubcommitcomment("casadi","casadi",build.getProperty("got_revision"),"Found BROKEN by %s.\n%s" % (builder,logs[-5000:]))
        githubcommitstatus("casadi","casadi",build.getProperty("got_revision"),"failure","Found BROKEN by %s." % builder)

c['status'].append(MyNotifier())

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

from buildbot import manhole
c['manhole'] = manhole.AuthorizedKeysManhole(7812, "authorized_keys")

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "CasADi"
c['projectURL'] = "http://casadi.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://moinette.esat.kuleuven.be:8010/"


